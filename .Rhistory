# compute indic
indic = mean(flows*coords[,3]/max(coords[,3]))
res=list()
res[[1]]=dat
res[[2]]=indic
return(res)
}
pedestrianStreets <- function(arrs){
coords = roads_raw[arr_streets%in% arrs,]
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.1)),]
dat = matrix(0,length(coords[,1]),4)
dat[,1:3]=coords
tot_length=sum(coords[,3])
# set non pedestrian roads length to zero
dat[sample(1:length(dat[,1]),floor(length(dat[,1])*0.8)),3] = 0
indic = sum(dat[,3])/tot_length
res=list()
res[[1]]=roads_raw
res[[2]]=indic
return(res)
}
pedestrianStreets(c(1))
pedestrianStreets <- function(arrs){
coords = roads_raw[arr_streets%in% arrs,]
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.01)),]
dat = matrix(0,length(coords[,1]),4)
dat[,1:3]=coords
tot_length=sum(coords[,3])
# set non pedestrian roads length to zero
dat[sample(1:length(dat[,1]),floor(length(dat[,1])*0.8)),3] = 0
indic = sum(dat[,3])/tot_length
res=list()
res[[1]]=roads_raw
res[[2]]=indic
return(res)
}
pedestrianStreets(c(1))
carToWork <- function(arrs){
coords = buildings@coords[arr_buildings%in% arrs,]
# sample for perf reasons
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.1)),]
n=length(coords[,1])
inds=sample(1:n,size=floor(0.1*n))
with_car = coords[inds,]
dests = matrix(data=c(runif(length(with_car[,1]),min=2.241859,max=2.428637),
runif(length(with_car[,1]),min=48.79654 ,max=48.9171)),nrow=length(with_car[,1]))
d <- (dests - with_car)^2
d <- sqrt(d[,1]+d[,2]) / dmax
indic = mean(d)
dat = matrix(0,n,3)
dat[inds,3]=d
dat[,1:2]=coords
res=list()
res[[1]]=dat
res[[2]]=indic
return(res)
}
carToWork <- function(arrs){
coords = buildings@coords[arr_buildings%in% arrs,]
# sample for perf reasons
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.1)),]
n=length(coords[,1])
inds=sample(1:n,size=floor(0.1*n))
with_car = coords[inds,]
dests = matrix(data=c(runif(length(with_car[,1]),min=2.241859,max=2.428637),
runif(length(with_car[,1]),min=48.79654 ,max=48.9171)),nrow=length(with_car[,1]))
d <- (dests - with_car)^2
d <- sqrt(d[,1]+d[,2]) / dmax
indic = mean(d)
dat = matrix(0,n,3)
dat[inds,3]=d
dat[,1:2]=coords
res=list()
res[[1]]=dat
res[[2]]=indic
return(res)
}
vehicleFlow <- function(arrs){
coords = roads_raw[arr_streets%in% arrs,]
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.1)),]
# generate hierarchy
flows <- rlnorm(length(coords[,1]),0,0.01)/2
flows<- flows/max(flows)
dat = matrix(0,length(coords[,1]),4)
dat[,1:3]=coords
dat[,4] = flows
# compute indic
indic = mean(flows*coords[,3]/max(coords[,3]))
res=list()
res[[1]]=dat
res[[2]]=indic
return(res)
}
pedestrianStreets <- function(arrs){
coords = roads_raw[arr_streets%in% arrs,]
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.01)),]
dat = matrix(0,length(coords[,1]),4)
dat[,1:3]=coords
tot_length=sum(coords[,3])
# set non pedestrian roads length to zero
dat[sample(1:length(dat[,1]),floor(length(dat[,1])*0.8)),3] = 0
indic = sum(dat[,3])/tot_length
res=list()
res[[1]]=dat
res[[2]]=indic
return(res)
}
pedestrianStreets(c(1))
pedestrianStreets <- function(arrs){
coords = roads_raw[arr_streets%in% arrs,]
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.1)),]
dat = matrix(0,length(coords[,1]),4)
dat[,1:3]=coords
tot_length=sum(coords[,3])
# set non pedestrian roads length to zero
dat[sample(1:length(dat[,1]),floor(length(dat[,1])*0.8)),3] = 0
indic = sum(dat[,3])/tot_length
res=list()
res[[1]]=dat
res[[2]]=indic
return(res)
}
pedestrianStreets(c(1))
rawBound <- function(indics,arrs){
weights <- c()
discrs <- c()
for(i in 1:length(indics)){
r = indics[i][[1]](arrs)
weights = append(weights,r[[2]])
show(dim(r[[1]]))
discrs = append(discrs,discrepancyCriteria(r[[1]],type=c('L2'))$DisL2)
}
weights=weights/sum(weights)
return(sum(weights*discrs))
}
# test
all = c(carToWork,vehicleFlow,pedestrianStreets)
rawBound(all,c(1))
length(all)
all = c(carToWork,vehicleFlow,pedestrianStreets)
rawBound(all,c(1))
rawBound <- function(indics,arrs){
weights <- c()
discrs <- c()
for(i in 1:length(indics)){
r = indics[i][[1]](arrs)
weights = append(weights,r[[2]])
#show(dim(r[[1]]))
discrs = append(discrs,discrepancyCriteria(r[[1]],type=c('L2'))$DisL2)
}
weights=weights/sum(weights)
show(weights)
return(sum(weights*discrs))
}
# test
all = c(carToWork,vehicleFlow,pedestrianStreets)
rawBound(all,c(1))
rawBound <- function(indics,arrs){
weights <- c()
discrs <- c()
for(i in 1:length(indics)){
r = indics[i][[1]](arrs)
weights = append(weights,r[[2]])
#show(dim(r[[1]]))
discrs = append(discrs,discrepancyCriteria(r[[1]],type=c('L2'))$DisL2)
}
weights=weights/sum(weights)
show(weights)
show(discrs)
return(sum(weights*discrs))
}
# test
all = c(carToWork,vehicleFlow,pedestrianStreets)
rawBound(all,c(1))
pedestrianStreets(c(1))
pedestrianStreets <- function(arrs){
coords = roads_raw[arr_streets%in% arrs,]
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.1)),]
dat = matrix(0,length(coords[,1]),3)
dat[,1:3]=coords
tot_length=sum(coords[,3])
# set non pedestrian roads length to zero
dat[sample(1:length(dat[,1]),floor(length(dat[,1])*0.8)),3] = 0
indic = sum(dat[,3])/tot_length
res=list()
res[[1]]=dat
res[[2]]=indic
return(res)
}
rawBound <- function(indics,arrs){
weights <- c()
discrs <- c()
for(i in 1:length(indics)){
r = indics[i][[1]](arrs)
weights = append(weights,r[[2]])
#show(dim(r[[1]]))
discrs = append(discrs,discrepancyCriteria(r[[1]],type=c('L2'))$DisL2)
}
weights=weights/sum(weights)
#show(weights)
#show(discrs)
return(sum(weights*discrs))
}
# test
all = c(carToWork,vehicleFlow,pedestrianStreets)
rawBound(all,c(1))
rawBound(all,c(1))
rawBound(all,c(2))
rawBound <- function(indics,arrs){
weights <- c()
discrs <- c()
for(i in 1:length(indics)){
r = indics[i][[1]](arrs)
weights = append(weights,r[[2]])
#show(dim(r[[1]]))
discrs = append(discrs,discrepancyCriteria(r[[1]],type=c('L2'))$DisL2)
}
res=list()
#mem values
res[[1]]=weights
weights=weights/sum(weights)
#show(weights)
#show(discrs)
res[[2]]=sum(weights*discrs)
return(res)
}
rawBound(all,c(2))
i1=list();i2=list();i3=list();bound=list();
for(i in 1:21){
i1[[i]]=c();i2[[i]]=c();i3[[i]]=c();bound[[i]]=c()
}
i1
nrep = 1
for(n in 1:nrep){
for(i in 1:20){
r=rawBound(all,c(i))
i1[[i]]=append(i1[[i]],r[[1]][1]);i2[[i]]=append(i2[[i]],r[[1]][2]);i3[[i]]=append(i3[[i]],r[[1]][3])
bound[[i]]=append(bound[[i]],r[[2]])
}
}
r
for(i in 1:21){
i1[[i]]=c(0);i2[[i]]=c(0);i3[[i]]=c(0);bound[[i]]=c(0)
}
i1
nrep = 1
for(n in 1:nrep){
for(i in 1:20){
r=rawBound(all,c(i))
i1[[i]]=append(i1[[i]],r[[1]][1]);i2[[i]]=append(i2[[i]],r[[1]][2]);i3[[i]]=append(i3[[i]],r[[1]][3])
bound[[i]]=append(bound[[i]],r[[2]])
}
}
rawBound(all,c(2))
rawBound(all,c(10))
carToWork <- function(arrs){
coords = buildings@coords[arr_buildings%in% arrs,]
# sample for perf reasons
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.05)),]
n=length(coords[,1])
inds=sample(1:n,size=floor(0.1*n))
with_car = coords[inds,]
dests = matrix(data=c(runif(length(with_car[,1]),min=2.241859,max=2.428637),
runif(length(with_car[,1]),min=48.79654 ,max=48.9171)),nrow=length(with_car[,1]))
d <- (dests - with_car)^2
d <- sqrt(d[,1]+d[,2]) / dmax
indic = mean(d)
dat = matrix(0,n,3)
dat[inds,3]=d
dat[,1:2]=coords
res=list()
res[[1]]=dat
res[[2]]=indic
return(res)
}
# mean vehicle flow per street : number of lanes, pedestrian streets, etc
#  -> normalized by a max flow. Log-normal distrib fits well such empirical var.
#  (street hierarchy == betweeness == preferential attchment)
vehicleFlow <- function(arrs){
coords = roads_raw[arr_streets%in% arrs,]
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.05)),]
# generate hierarchy
flows <- rlnorm(length(coords[,1]),0,0.01)/2
flows<- flows/max(flows)
dat = matrix(0,length(coords[,1]),4)
dat[,1:3]=coords
dat[,4] = flows
# compute indic
indic = mean(flows*coords[,3]/max(coords[,3]))
res=list()
res[[1]]=dat
res[[2]]=indic
return(res)
}
# more qualitative indicator : proportion of pedestrian streets
#
pedestrianStreets <- function(arrs){
coords = roads_raw[arr_streets%in% arrs,]
coords = coords[sample(1:length(coords[,1]),floor(length(coords[,1])*0.05)),]
dat = matrix(0,length(coords[,1]),3)
dat[,1:3]=coords
tot_length=sum(coords[,3])
# set non pedestrian roads length to zero
dat[sample(1:length(dat[,1]),floor(length(dat[,1])*0.8)),3] = 0
indic = sum(dat[,3])/tot_length
res=list()
res[[1]]=dat
res[[2]]=indic
return(res)
}
# OK 3 indicators
# compute robustness ratio
rawBound <- function(indics,arrs){
weights <- c()
discrs <- c()
for(i in 1:length(indics)){
r = indics[i][[1]](arrs)
weights = append(weights,r[[2]])
#show(dim(r[[1]]))
discrs = append(discrs,discrepancyCriteria(r[[1]],type=c('L2'))$DisL2)
}
res=list()
#mem values
res[[1]]=weights
weights=weights/sum(weights)
#show(weights)
#show(discrs)
res[[2]]=sum(weights*discrs)
return(res)
}
# test
all = c(carToWork,vehicleFlow,pedestrianStreets)
rawBound(all,c(10))
# OK -> let compute for all arrs
i1=list();i2=list();i3=list();bound=list();
for(i in 1:21){
i1[[i]]=c(0);i2[[i]]=c(0);i3[[i]]=c(0);bound[[i]]=c(0)
}
nrep = 1
for(n in 1:nrep){
for(i in 1:20){
i
r=rawBound(all,c(i))
i1[[i]]=append(i1[[i]],r[[1]][1]);i2[[i]]=append(i2[[i]],r[[1]][2]);i3[[i]]=append(i3[[i]],r[[1]][3])
bound[[i]]=append(bound[[i]],r[[2]])
}
r=rawBound(all,1:20)
}
for(n in 1:nrep){
for(i in 1:20){
show(i)
r=rawBound(all,c(i))
i1[[i]]=append(i1[[i]],r[[1]][1]);i2[[i]]=append(i2[[i]],r[[1]][2]);i3[[i]]=append(i3[[i]],r[[1]][3])
bound[[i]]=append(bound[[i]],r[[2]])
}
}
i1
i1=list();i2=list();i3=list();bound=list();
for(i in 1:20){
i1[[i]]=c(0);i2[[i]]=c(0);i3[[i]]=c(0);bound[[i]]=c(0)
}
i1=list();i2=list();i3=list();bound=list();
for(i in 1:20){
i1[[i]]=c(0);i2[[i]]=c(0);i3[[i]]=c(0);bound[[i]]=c(0)
}
nrep = 50
for(n in 1:nrep){
show(n)
for(i in 1:20){
r=rawBound(all,c(i))
i1[[i]]=append(i1[[i]],r[[1]][1]);i2[[i]]=append(i2[[i]],r[[1]][2]);i3[[i]]=append(i3[[i]],r[[1]][3])
bound[[i]]=append(bound[[i]],r[[2]])
}
}
i1
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(mean(i1[[i]][2:51]),"+-",sd(i1[[i]][2:51]))
res[i,2] = paste(mean(i2[[i]][2:51]),"+-",sd(i2[[i]][2:51]))
res[i,3] = paste(mean(i3[[i]][2:51]),"+-",sd(i3[[i]][2:51]))
res[i,4] = paste(mean(bound[[i]][2:51]),"+-",sd(bound[[i]][2:51]))
}
res
help(as.string)
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(toString(mean(i1[[i]][2:51]),width=6),"+-",sd(i1[[i]][2:51]))
res[i,2] = paste(mean(i2[[i]][2:51]),"+-",sd(i2[[i]][2:51]))
res[i,3] = paste(mean(i3[[i]][2:51]),"+-",sd(i3[[i]][2:51]))
res[i,4] = paste(mean(bound[[i]][2:51]),"+-",sd(bound[[i]][2:51]))
}
res
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(sprintf("%07.3f", mean(i1[[i]][2:51])),"+-",sd(i1[[i]][2:51]))
res[i,2] = paste(mean(i2[[i]][2:51]),"+-",sd(i2[[i]][2:51]))
res[i,3] = paste(mean(i3[[i]][2:51]),"+-",sd(i3[[i]][2:51]))
res[i,4] = paste(mean(bound[[i]][2:51]),"+-",sd(bound[[i]][2:51]))
}
res
# produce final mat
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(sprintf("%07.6f", mean(i1[[i]][2:51])),"+-",sd(i1[[i]][2:51]))
res[i,2] = paste(mean(i2[[i]][2:51]),"+-",sd(i2[[i]][2:51]))
res[i,3] = paste(mean(i3[[i]][2:51]),"+-",sd(i3[[i]][2:51]))
res[i,4] = paste(mean(bound[[i]][2:51]),"+-",sd(bound[[i]][2:51]))
}
res
# produce final mat
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(sprintf("%07.6f", mean(i1[[i]][2:51])),"+-",sprintf("%07.6f",sd(i1[[i]][2:51])))
res[i,2] = paste(mean(i2[[i]][2:51]),"+-",sd(i2[[i]][2:51]))
res[i,3] = paste(mean(i3[[i]][2:51]),"+-",sd(i3[[i]][2:51]))
res[i,4] = paste(mean(bound[[i]][2:51]),"+-",sd(bound[[i]][2:51]))
}
res
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(sprintf("%07.6f", mean(i1[[i]][2:51])),"+-",sprintf("%07.6f",sd(i1[[i]][2:51])))
res[i,2] = paste(sprintf("%07.6f",mean(i2[[i]][2:51])),"+-",sprintf("%07.6f",sd(i2[[i]][2:51])))
res[i,3] = paste(sprintf("%07.6f",mean(i3[[i]][2:51])),"+-",sprintf("%07.6f",sd(i3[[i]][2:51])))
res[i,4] = paste(sprintf("%07.6f",mean(bound[[i]][2:51])),"+-",sprintf("%07.6f",sd(bound[[i]][2:51])))
}
res
knitr('testknitr.Rnw')
library(knitr)
knitr('testknitr.Rnw')
<<kable>>=
library(knitr)
kable(res)
@
# produce final mat
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(sprintf("%07.6f", mean(i1[[i]][2:51])),"+-",sprintf("%07.6f",sd(i1[[i]][2:51])))
res[i,2] = paste(sprintf("%07.6f",mean(i2[[i]][2:51])),"+-",sprintf("%07.6f",sd(i2[[i]][2:51])))
res[i,3] = paste(sprintf("%07.6f",mean(i3[[i]][2:51])),"+-",sprintf("%07.6f",sd(i3[[i]][2:51])))
res[i,4] = paste(sprintf("%07.6f",mean(bound[[i]][2:51]/bound[[i]][1])),"+-",sprintf("%07.6f",sd(bound[[i]][2:51]/bound[[i]][1])))
}
res
# produce final mat
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(sprintf("%07.6f", mean(i1[[i]][2:51])),"+-",sprintf("%07.6f",sd(i1[[i]][2:51])))
res[i,2] = paste(sprintf("%07.6f",mean(i2[[i]][2:51])),"+-",sprintf("%07.6f",sd(i2[[i]][2:51])))
res[i,3] = paste(sprintf("%07.6f",mean(i3[[i]][2:51])),"+-",sprintf("%07.6f",sd(i3[[i]][2:51])))
res[i,4] = paste(sprintf("%07.6f",mean(bound[[i]][2:51]/bound[[i]][2])),"+-",sprintf("%07.6f",sd(bound[[i]][2:51]/bound[[i]][2])))
}
res
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(sprintf("%07.6f", mean(i1[[i]][2:51])),"+-",sprintf("%07.6f",sd(i1[[i]][2:51])))
res[i,2] = paste(sprintf("%07.6f",mean(i2[[i]][2:51])),"+-",sprintf("%07.6f",sd(i2[[i]][2:51])))
res[i,3] = paste(sprintf("%07.6f",mean(i3[[i]][2:51])),"+-",sprintf("%07.6f",sd(i3[[i]][2:51])))
res[i,4] = paste(sprintf("%07.6f",mean(bound[[i]][2:51]/bound[[1]][2:51])),"+-",sprintf("%07.6f",sd(bound[[i]][2:51]/bound[[1]][2:51])))
}
res
knit('testknitr.Rnw')
knit('Models/testknitr.Rnw')
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(sprintf("%07.6f", mean(i1[[i]][2:51])),"$\pm$",sprintf("%07.6f",sd(i1[[i]][2:51])))
res[i,2] = paste(sprintf("%07.6f",mean(i2[[i]][2:51])),"$\pm$",sprintf("%07.6f",sd(i2[[i]][2:51])))
res[i,3] = paste(sprintf("%07.6f",mean(i3[[i]][2:51])),"$\pm$",sprintf("%07.6f",sd(i3[[i]][2:51])))
res[i,4] = paste(sprintf("%07.6f",mean(bound[[i]][2:51]/bound[[1]][2:51])),"$\pm$",sprintf("%07.6f",sd(bound[[i]][2:51]/bound[[1]][2:51])))
}
res
# produce final mat
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(sprintf("%07.6f", mean(i1[[i]][2:51])),"$\\pm$",sprintf("%07.6f",sd(i1[[i]][2:51])))
res[i,2] = paste(sprintf("%07.6f",mean(i2[[i]][2:51])),"$\\pm$",sprintf("%07.6f",sd(i2[[i]][2:51])))
res[i,3] = paste(sprintf("%07.6f",mean(i3[[i]][2:51])),"$\\pm$",sprintf("%07.6f",sd(i3[[i]][2:51])))
res[i,4] = paste(sprintf("%07.6f",mean(bound[[i]][2:51]/bound[[1]][2:51])),"$\\pm$",sprintf("%07.6f",sd(bound[[i]][2:51]/bound[[1]][2:51])))
}
res
knit('Models/testknitr.Rnw')
res = matrix("",20,4)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(i,"th")
res[i,2] = paste(sprintf("%07.6f", mean(i1[[i]][2:51])),"$\\pm$",sprintf("%07.6f",sd(i1[[i]][2:51])))
res[i,3] = paste(sprintf("%07.6f",mean(i2[[i]][2:51])),"$\\pm$",sprintf("%07.6f",sd(i2[[i]][2:51])))
res[i,4] = paste(sprintf("%07.6f",mean(i3[[i]][2:51])),"$\\pm$",sprintf("%07.6f",sd(i3[[i]][2:51])))
res[i,5] = paste(sprintf("%07.6f",mean(bound[[i]][2:51]/bound[[1]][2:51])),"$\\pm$",sprintf("%07.6f",sd(bound[[i]][2:51]/bound[[1]][2:51])))
}
res
# produce final mat
res = matrix("",20,5)
for(i in 1:20){
# compare to first arr
res[i,1] = paste(i,"th")
res[i,2] = paste(sprintf("%07.6f", mean(i1[[i]][2:51])),"$\\pm$",sprintf("%07.6f",sd(i1[[i]][2:51])))
res[i,3] = paste(sprintf("%07.6f",mean(i2[[i]][2:51])),"$\\pm$",sprintf("%07.6f",sd(i2[[i]][2:51])))
res[i,4] = paste(sprintf("%07.6f",mean(i3[[i]][2:51])),"$\\pm$",sprintf("%07.6f",sd(i3[[i]][2:51])))
res[i,5] = paste(sprintf("%07.6f",mean(bound[[i]][2:51]/bound[[1]][2:51])),"$\\pm$",sprintf("%07.6f",sd(bound[[i]][2:51]/bound[[1]][2:51])))
}
res
knit('Models/testknitr.Rnw')
