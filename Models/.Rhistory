100000/(1:Ncities)^ranksize
cities = data.frame(x=runif(Ncities,0,500),y=runif(Ncities,0,500),population=Pmax/(1:Ncities)^ranksize)
Pmax = 100000
ranksize = 0.8
Pmax = 50000
Ncities = 50
cities = data.frame(x=runif(Ncities,0,500),y=runif(Ncities,0,500),population=Pmax/(1:Ncities)^ranksize)
hist(cities$population)
SpatialPoints(coords=cities[,1:2])
positions = SpatialPoints(coords=cities[,1:2])
spDists(cities[,1:2])
spDists(as.matrix(cities[,1:2]))
Ncities = 100
cities = data.frame(x=runif(Ncities,0,500),y=runif(Ncities,0,500),population=Pmax/(1:Ncities)^ranksize)
distances = spDists(as.matrix(cities[,1:2]))
distances[1:10,1:10]
gammaGravity = 1.3
decayGravity = 100
exp(-distances / decayGravity)
ptot = sum(populations)
diag((populations/ptot)^gammaGravity)
populations = cities$population
ptot = sum(populations)
diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity)
pot=  diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity)
pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))
install.packages("nloptr")
library(nloptr)
nloptr(0,function(x){(x-1)^2})
nloptr(0,function(x){(x-1)^2},opts = list(algorithm='NLOPT_GN_DIRECT'))
nloptr.print.options().
nloptr.print.options()
nloptr(0,function(x){(x-1)^2},opts = list('algorithm'='NLOPT_GN_DIRECT'))
help("nloptr")
nloptr(0,function(x){(x-1)^2},lb=-Inf,ub=Inf,opts = list('algorithm'='NLOPT_GN_DIRECT'))
opts <- list("algorithm"="NLOPT_LD_LBFGS",
"xtol_rel"=1.0e-8)
nloptr(0,function(x){(x-1)^2},lb=-Inf,ub=Inf,opts = opts)
nloptr(x0=0,function(x){(x-1)^2},lb=-Inf,ub=Inf,opts = opts)
nloptr.get.default.options()
opts <- list("algorithm"="NLOPT_GN_DIRECT_L_RAND",
"xtol_rel"=1.0e-8)
nloptr(x0=0,function(x){(x-1)^2},lb=-Inf,ub=Inf,opts = opts)
populations = matrix(0,Ncities,times)
times=10
potentialWeight = 1
times=10
populations = matrix(0,Ncities,times)
pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))
populations = matrix(0,Ncities,times)
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
}
growthrate = 0.05
gammaGravity = 1.3
decayGravity = 100
potentialWeight = 1
times=10
potentials <-function(populations){
ptot = sum(populations)
return(diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity))
}
populations = matrix(0,Ncities,times)
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
}
growthRate = 0.05
gammaGravity = 1.3
decayGravity = 100
potentialWeight = 1
times=10
potentials <-function(populations){
ptot = sum(populations)
return(diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity))
}
populations = matrix(0,Ncities,times)
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
}
populations
populations = matrix(0,Ncities,times)
populations[,1] = cities$population
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
}
populations
populations_gibrat = populations_gibrat[,t-1]*(1 + growthRate)
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat = populations_gibrat[,t-1]*(1 + growthRate)
}
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
}
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
pflat=cities$population;pgflat=cities$population;tflat=rep(1,Ncities)
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
pflat=append(pflat, populations[,t]);pgflat=append(pgflat, populations_gibrat[,t]);tflat=append(tflat,rep(t,Ncities))
}
pflat
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
pflat=cities$population;pgflat=cities$population;tflat=rep(1,Ncities);cflat=1:Ncities
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
pflat=append(pflat, populations[,t]);pgflat=append(pgflat, populations_gibrat[,t]);tflat=append(tflat,rep(t,Ncities));cflat=append(cflat,Ncities)
}
df = data.frame(pflat,pgflat,tflat,cflat)
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
pflat=cities$population;pgflat=cities$population;tflat=rep(1,Ncities);cflat=1:Ncities
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
pflat=append(pflat, populations[,t]);pgflat=append(pgflat, populations_gibrat[,t]);tflat=append(tflat,rep(t,Ncities));cflat=append(cflat,1:Ncities)
}
df = data.frame(pflat,pgflat,tflat,cflat)
g=ggplot(df)
g+geom_point(aes(x=tflat,y=pflat,colour=cflat))
g+geom_point(aes(x=tflat,y=pflat,colour=cflat),col="red")
g+geom_point(aes(x=tflat,y=pflat,colour=cflat))
g+geom_point(aes(x=tflat,y=pflat,colour=cflat),shape=1)
g+geom_point(aes(x=tflat,y=pflat,colour=cflat),shape=1)+geom_point(aes(x=tflat,y=pgflat,colour=cflat),shape=3)
ranksize = 0.4
Pmax = 50000
Ncities = 20
cities = data.frame(x=runif(Ncities,0,500),y=runif(Ncities,0,500),population=Pmax/(1:Ncities)^ranksize)
distances = spDists(as.matrix(cities[,1:2]))
##  generate synthetic time series
growthRate = 0.05
gammaGravity = 1.3
decayGravity = 100
potentialWeight = 1
times=10
potentials <-function(populations){
ptot = sum(populations)
return(diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity))
}
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
pflat=cities$population;pgflat=cities$population;tflat=rep(1,Ncities);cflat=1:Ncities
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
pflat=append(pflat, populations[,t]);pgflat=append(pgflat, populations_gibrat[,t]);tflat=append(tflat,rep(t,Ncities));cflat=append(cflat,1:Ncities)
}
df = data.frame(pflat,pgflat,tflat,cflat)
g=ggplot(df)
g+geom_point(aes(x=tflat,y=pflat,colour=cflat),shape=1)+geom_point(aes(x=tflat,y=pgflat,colour=cflat),shape=3)
ranksize = 1.3
Pmax = 50000
Ncities = 20
cities = data.frame(x=runif(Ncities,0,500),y=runif(Ncities,0,500),population=Pmax/(1:Ncities)^ranksize)
distances = spDists(as.matrix(cities[,1:2]))
##  generate synthetic time series
growthRate = 0.05
gammaGravity = 1.3
decayGravity = 100
potentialWeight = 1
times=10
potentials <-function(populations){
ptot = sum(populations)
return(diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity))
}
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
pflat=cities$population;pgflat=cities$population;tflat=rep(1,Ncities);cflat=1:Ncities
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
pflat=append(pflat, populations[,t]);pgflat=append(pgflat, populations_gibrat[,t]);tflat=append(tflat,rep(t,Ncities));cflat=append(cflat,1:Ncities)
}
df = data.frame(pflat,pgflat,tflat,cflat)
g=ggplot(df)
g+geom_point(aes(x=tflat,y=pflat,colour=cflat),shape=1)+geom_point(aes(x=tflat,y=pgflat,colour=cflat),shape=3)
growthRate = 0.05
gammaGravity = 1
decayGravity = 10
potentialWeight = 1
times=10
potentials <-function(populations){
ptot = sum(populations)
return(diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity))
}
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
pflat=cities$population;pgflat=cities$population;tflat=rep(1,Ncities);cflat=1:Ncities
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
pflat=append(pflat, populations[,t]);pgflat=append(pgflat, populations_gibrat[,t]);tflat=append(tflat,rep(t,Ncities));cflat=append(cflat,1:Ncities)
}
df = data.frame(pflat,pgflat,tflat,cflat)
g=ggplot(df)
g+geom_point(aes(x=tflat,y=pflat,colour=cflat),shape=1)+geom_point(aes(x=tflat,y=pgflat,colour=cflat),shape=3)
growthRate = 0.05
gammaGravity = 1
decayGravity = 1000
potentialWeight = 1
times=10
potentials <-function(populations){
ptot = sum(populations)
return(diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity))
}
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
pflat=cities$population;pgflat=cities$population;tflat=rep(1,Ncities);cflat=1:Ncities
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
pflat=append(pflat, populations[,t]);pgflat=append(pgflat, populations_gibrat[,t]);tflat=append(tflat,rep(t,Ncities));cflat=append(cflat,1:Ncities)
}
df = data.frame(pflat,pgflat,tflat,cflat)
g=ggplot(df)
g+geom_point(aes(x=tflat,y=pflat,colour=cflat),shape=1)+geom_point(aes(x=tflat,y=pgflat,colour=cflat),shape=3)
growthRate = 0.05
gammaGravity = 1
decayGravity = 1
potentialWeight = 1
times=10
potentials <-function(populations){
ptot = sum(populations)
return(diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity))
}
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
pflat=cities$population;pgflat=cities$population;tflat=rep(1,Ncities);cflat=1:Ncities
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
pflat=append(pflat, populations[,t]);pgflat=append(pgflat, populations_gibrat[,t]);tflat=append(tflat,rep(t,Ncities));cflat=append(cflat,1:Ncities)
}
df = data.frame(pflat,pgflat,tflat,cflat)
g=ggplot(df)
g+geom_point(aes(x=tflat,y=pflat,colour=cflat),shape=1)+geom_point(aes(x=tflat,y=pgflat,colour=cflat),shape=3)
growthRate = 0.05
gammaGravity = 0.2
decayGravity = 1
potentialWeight = 1
times=10
potentials <-function(populations){
ptot = sum(populations)
return(diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity))
}
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
pflat=cities$population;pgflat=cities$population;tflat=rep(1,Ncities);cflat=1:Ncities
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
pflat=append(pflat, populations[,t]);pgflat=append(pgflat, populations_gibrat[,t]);tflat=append(tflat,rep(t,Ncities));cflat=append(cflat,1:Ncities)
}
df = data.frame(pflat,pgflat,tflat,cflat)
g=ggplot(df)
g+geom_point(aes(x=tflat,y=pflat,colour=cflat),shape=1)+geom_point(aes(x=tflat,y=pgflat,colour=cflat),shape=3)
ranksize = 0.8
Pmax = 50000
Ncities = 50
cities = data.frame(x=runif(Ncities,0,500),y=runif(Ncities,0,500),population=Pmax/(1:Ncities)^ranksize)
distances = spDists(as.matrix(cities[,1:2]))
##  generate synthetic time series
growthRate = 0.05
gammaGravity = 1.3
decayGravity = 100
potentialWeight = 1
times=10
potentials <-function(populations){
ptot = sum(populations)
return(diag((populations/ptot)^gammaGravity)%*%exp(-distances / decayGravity)%*%diag((populations/ptot)^gammaGravity))
}
populations = matrix(0,Ncities,times)
populations_gibrat = matrix(0,Ncities,times)
populations[,1] = cities$population
populations_gibrat[,1] = cities$population
pflat=cities$population;pgflat=cities$population;tflat=rep(1,Ncities);cflat=1:Ncities
for(t in 2:times){
pot = potentials(populations[,t-1])
populations[,t] = populations[,t-1]*(1 + growthRate + pot%*%matrix(rep(1,nrow(pot)),nrow=nrow(pot))/potentialWeight)
populations_gibrat[,t] = populations_gibrat[,t-1]*(1 + growthRate)
pflat=append(pflat, populations[,t]);pgflat=append(pgflat, populations_gibrat[,t]);tflat=append(tflat,rep(t,Ncities));cflat=append(cflat,1:Ncities)
}
df = data.frame(pflat,pgflat,tflat,cflat)
g=ggplot(df)
g+geom_point(aes(x=tflat,y=pflat,colour=cflat),shape=1)+geom_point(aes(x=tflat,y=pgflat,colour=cflat),shape=3)
setwd(paste0(Sys.getenv('CS_HOME'),'/RobustnessDiscrepancy/Models'))
source('functions.R')
library(ggplot2)
res=list()
for(dep in c("69","75","92","93","94")){
res[[dep]]=load(paste0('res/missing_ext_',dep,'.RData'))
}
res
res=list()
for(dep in c("69","75","92","93","94")){
res[[dep]]=load(paste0('res/missing_ext_',dep,'.RData'))
}
allres=list()
for(dep in c("69","75","92","93","94")){
load(paste0('res/missing_ext_',dep,'.RData'))
allres[[dep]] = res
}
allres
unlist(allres)
unlist(lapply(function(res){unlist(lapply(res,function(d){d[,1]/d[1,1]}))},allres))
unlist(lapply(allres,function(res){unlist(lapply(res,function(d){d[,1]/d[1,1]}))}))
nams(allres)
names(allres)
rep(names(allres),2)
dim(allres[[1]])
allres[[1]]
length(allres[[1]])
length(allres[[1]][[1]])
dim(allres[[1]][[1]])
deps = c()
for(n in names(allres)){deps=append(deps,rep(n,length(allres[[1]])*dim(allres[[1]][[1]])[1]))}
deps
dr = as.tbl(data.frame(
rob=unlist(lapply(allres,function(res){unlist(lapply(res,function(d){d[,1]/d[1,1]}))})),
missing=unlist(lapply(allres,function(res){unlist(lapply(res,function(d){d[,2]}))})),
departement=deps
))
dr
df = dr %>% group_by(missing,departement) %>% summarise(robmean=mean(rob),robsd=sd(rob))
df
g = ggplot(data = df,aes(x=missing,y=robmean,colour=departement))
g+geom_line()+geom_point()+geom_errorbar(aes(ymin=robmean-robsd,ymax=robmean+robsd),width=0.02)
allres=list()
for(dep in c("75","92","93","94")){
load(paste0('res/missing_ext_',dep,'.RData'))
allres[[dep]] = res
}
deps = c()
for(n in names(allres)){deps=append(deps,rep(n,length(allres[[1]])*dim(allres[[1]][[1]])[1]))}
dr = as.tbl(data.frame(
rob=unlist(lapply(allres,function(res){unlist(lapply(res,function(d){d[,1]/d[1,1]}))})),
missing=unlist(lapply(allres,function(res){unlist(lapply(res,function(d){d[,2]}))})),
departement=deps
))
df = dr %>% group_by(missing,departement) %>% summarise(robmean=mean(rob),robsd=sd(rob))
g = ggplot(data = df,aes(x=missing,y=robmean,colour=departement))
g+geom_line()+geom_point()+geom_errorbar(aes(ymin=robmean-robsd,ymax=robmean+robsd),width=0.02)
load('res/missing.RData')
res
res[[1]][1,1]
dr = as.tbl(data.frame(
rob=unlist(lapply(allres,function(res){unlist(lapply(res,function(d){d[,1]/res[[1]][1,1]}))})),
missing=unlist(lapply(allres,function(res){unlist(lapply(res,function(d){d[,2]}))})),
departement=deps
))
df = dr %>% group_by(missing,departement) %>% summarise(robmean=mean(rob),robsd=sd(rob))
g = ggplot(data = df,aes(x=missing,y=robmean,colour=departement))
g+geom_line()+geom_point()+geom_errorbar(aes(ymin=robmean-robsd,ymax=robmean+robsd),width=0.02)
load('res/missing.RData')
grdParis=res
deps = c()
for(n in names(allres)){deps=append(deps,rep(n,length(allres[[1]])*dim(allres[[1]][[1]])[1]))}
dr = as.tbl(data.frame(
rob=unlist(lapply(allres,function(res){unlist(lapply(res,function(d){d[,1]/grdParis[[1]][1,1]}))})),
missing=unlist(lapply(allres,function(res){unlist(lapply(res,function(d){d[,2]}))})),
departement=deps
))
df = dr %>% group_by(missing,departement) %>% summarise(robmean=mean(rob),robsd=sd(rob))
g = ggplot(data = df,aes(x=missing,y=robmean,colour=departement))
g+geom_line()+geom_point()+geom_errorbar(aes(ymin=robmean-robsd,ymax=robmean+robsd),width=0.02)
g = ggplot(data = df,aes(x=missing,y=robmean,colour=departement))
g+geom_line()+geom_point()+geom_errorbar(aes(ymin=robmean-robsd,ymax=robmean+robsd),width=0.01)
g=ggplot(data=df,aes(x=missing,y=robsd,colour=departement))
g+geom_line()
g+geom_line()+geom_smooth()
g = ggplot(data = df,aes(x=missing,y=robmean,colour=departement))
g+geom_line()+geom_point()+geom_errorbar(aes(ymin=robmean-robsd,ymax=robmean+robsd),width=0.01)+
xlab("Missing Data")+ylab("Robustness")
g=ggplot(data=df,aes(x=missing,y=robsd,colour=departement))
g+geom_line()+geom_smooth()+xlab("Missing Data")+ylab("Std Robustness")
d = loadData('grandParis')
names(d)
vignette("cartography")
carto <- function(spdf,df,var){
cols <- carto.pal(pal1 = "green.pal",n1 = 5, pal2 = "red.pal",n2 = 5)
#plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdata,
df = df,
var=var,
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.1
)
plot(spdata,border = "grey20", lwd=0.1, add=TRUE)
}
carto(d$jdata,d$spdata,"medincome")
carto <- function(spdf,df,var){
cols <- carto.pal(pal1 = "green.pal",n1 = 5, pal2 = "red.pal",n2 = 5)
#plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdf,
df = df,
var=var,
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.1
)
plot(spdf,border = "grey20", lwd=0.1, add=TRUE)
}
carto(d$jdata,d$spdata,"medincome")
carto(d$spdata,d$jdata,"medincome")
carto <- function(spdf,df,var,title){
cols <- carto.pal(pal1 = "green.pal",n1 = 5, pal2 = "red.pal",n2 = 5)
#plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdf,
df = df,
var=var,
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.1,
legend.pos = "right",
legend.title.txt = title,
legend.values.rnd = 2
)
plot(spdf,border = "grey20", lwd=0.1, add=TRUE)
}
carto(d$spdata,d$jdata,"medincome","Median Income")
mo=moran(df = d$jdata,spdf = d$spdata,spatialWeights = d$spweights,var = "medincome",sampling = 1:nrow(d$jdata))
par(mfrow = c(1,2))
carto(d$spdata,d$jdata,"medincome","Median\nIncome")
carto(d$spdata,data.frame(d$jdata,mo$localmorans),"medincome","Median\nIncome")
carto <- function(spdf,df,var,title){
cols <- carto.pal(pal1 = "green.pal",n1 = 5, pal2 = "red.pal",n2 = 5)
#plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdf,
df = df,
var=var,
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.1,
legend.pos = "left",
legend.title.txt = title,
legend.values.rnd = 2
)
plot(spdf,border = "grey20", lwd=0.1, add=TRUE)
}
par(mfrow = c(1,2))
carto(d$spdata,d$jdata,"medincome","Median\nIncome")
carto(d$spdata,data.frame(d$jdata,moran=mo$localmorans),"moran","Local Moran")
help("choroLayer")
carto <- function(spdf,df,var,title){
cols <- carto.pal(pal1 = "green.pal",n1 = 5, pal2 = "red.pal",n2 = 5)
#plot(spdata, border = NA, col = NA, bg = "#E3DEBF")
choroLayer(spdf = spdf,
df = df,
var=var,
col=cols,
nclass=10,
#breaks = quantile(data$NBMEN11,probs=seq(from=0,to=1,by=0.2),na.rm=TRUE),
add=FALSE,lwd = 0.1,
legend.pos = "topleft",
legend.title.txt = title,
legend.values.rnd = 2
)
plot(spdf,border = "grey20", lwd=0.1, add=TRUE)
}
par(mfrow = c(1,2))
carto(d$spdata,d$jdata,"medincome","Median\nIncome")
carto(d$spdata,data.frame(d$jdata,moran=mo$localmorans),"moran","Local Moran")
